# ===========================================================
# Photonix 后端服务环境变量配置
# ===========================================================

# 这些变量定义了后端服务如何连接到外部服务），
# 以及一些运行时的行为。
# 本文件位于项目根目录，由 docker-compose.yml 通过 env_file 加载。

# --- Redis 缓存配置 ---
# Redis 连接 URL。
# 'redis' 是 docker-compose 网络中 Redis 服务的名称，'6379'是 Redis 的默认端口。
REDIS_URL=redis://redis:6379

# --- 服务配置 ---
# 服务监听的端口。
# 默认是 13001。如果您想更改，请在这里设置。
PORT=13001

# Node.js 运行环境模式。
# 'production' 模式通常会启用性能优化和更少的日志输出。
# 'development' 模式可能包含更多调试信息。
NODE_ENV=production

# --- 日志级别 ---
# 控制应用程序的日志输出详细程度。
# 可选值：debug, info, warn, error, fatal。
# 'info' 会输出信息、警告和错误日志。
LOG_LEVEL=info

# --- 性能模式（自适应调度） ---
# auto | low | medium | high
# 建议保持 auto，由系统根据负载自动调节并发、HLS回填和 ffmpeg 配置
PERFORMANCE_MODE=auto


# 调整速率限制（可选，默认 15 分钟/100 次，未设置将使用默认）
# API 速率限制的时间窗口（分钟）
RATE_LIMIT_WINDOW_MINUTES=1
# 在一个时间窗口内，单个 IP 允许的最大请求数
RATE_LIMIT_MAX_REQUESTS=500

# --- 安全配置 ---
# 用于签发和验证登录 Token 的密钥，请修改为一个复杂的、随机的字符串
JWT_SECRET=your-own-very-long-and-random-secret-string-12345

# 超级管理员密码，用于修改关键设置
ADMIN_SECRET=admin



# ================= 可自定义配置（全部为可选，默认无需配置，按需取消注释） =================
# 推荐：如无特殊需求，保持默认注释即可。下方为不同场景的推荐配置示例。

# --- SQLite 初始超时（程序会自适应调整，一般无需配置） ---
# 小型部署/本地盘：默认即可
# NFS/慢盘环境推荐：
# SQLITE_BUSY_TIMEOUT=30000
# SQLITE_QUERY_TIMEOUT=60000

# --- 索引/缓存相关（一般无需配置） ---
# 大型图库（>10万张）推荐适当增大批量参数
# INDEX_STABILIZE_DELAY_MS=5000
# TAG_INVALIDATION_MAX_TAGS=5000
# THUMB_CHECK_BATCH_SIZE=500
# THUMB_CHECK_BATCH_DELAY_MS=100
# COVER_INFO_LRU_SIZE=8000
# ROUTE_CACHE_BROWSE_PATTERN=route_cache:*:/api/browse*

# --- 后台缩略图对账循环参数（一般无需配置） ---
# 大型图库/慢盘建议适当调小批量，避免IO压力
# THUMB_RECONCILE_BATCH_SIZE=200
# THUMB_RECONCILE_DELAY_MS=1000

# --- 可选：服务 Redis 兜底缓存 ---
# 高并发/分布式部署推荐开启
# SETTINGS_REDIS_CACHE=true

# --- 文件系统模式与 NFS 同步 ---
# auto|inotify|nfs，auto 下自动探测，nfs 下不启用 chokidar，仅用对账
# 本地盘推荐：FS_MODE=auto
# NFS 推荐：FS_MODE=nfs
FS_MODE=auto
# NFS 环境下如需目录级对账，开启此项
ENABLE_NFS_SYNC=false
# 是否开启缩略图存在性对账（默认开启，低频批处理）
ENABLE_THUMB_RECON=true
# NFS/网络盘如需更高兼容性可开启轮询(开启后会占用更多CPU资源)
# WATCH_USE_POLLING=true

# --- Worker 资源与图片像素护栏 ---
# 单个 Worker 的老生代最大内存（MB）
# 低内存主机可适当调小
WORKER_MEMORY_MB=512
# sharp 单图最大像素（默认 24k x 24k）
# 超大图环境可适当增大
SHARP_MAX_PIXELS=576000000

# --- AI 缓存（仅 AI worker 使用；单位字节；默认 256MB） ---
# 大量AI批量处理时可适当增大
# AI_CACHE_MAX_BYTES=536870912

# --- AI 功能限流（仅启用 AI 时可配置） ---
# 公网/多人环境建议限流
# AI_DAILY_LIMIT=200
# AI_PER_IMAGE_COOLDOWN_SEC=60

# --- 维护任务（CRON 与对账开关） ---
# 默认每小时执行一次维护任务；可修改为 "*/30 * * * *" 等表达式
# 小型图库可适当降低频率，大型图库建议保持默认
MAINTENANCE_CRON=0 * * * *
# 维护任务的功能开关（默认同时执行目录对账与缩略图对账）
MAINTENANCE_FLAGS="--reconcile-dirs --reconcile-thumbs"

# ================= 大规模首扫安全配置（可选，建议首发时启用） =================
# 推荐：首次大批量导入时务必参考下方配置，避免资源打满

# 限制索引并发（自适应已接管，一般无需设置）
# INDEX_CONCURRENCY=4

# 缩略图 worker 数（自适应按派发并发控制，一般无需设置）
# THUMBNAIL_WORKERS=2

# HLS 生成并发（自适应已接管，一般无需设置）
# VIDEO_HLS_CONCURRENCY=1

# 首发禁用 HLS 回填（自适应可按低负载档自动禁用）
# DISABLE_HLS_BACKFILL=true

# Node 线程池大小（sharp 等 CPU 任务），建议 ≤ CPU 核心的一半
#UV_THREADPOOL_SIZE=4

# ffmpeg 线程与预设（可选兜底；自适应已自动下发）
# FFMPEG_THREADS=1
# FFMPEG_PRESET=veryfast

# 错误率熔断器（时间窗/阈值/冷却期，单位：秒）
#ERROR_BREAKER_WINDOW_SEC=600
#ERROR_BREAKER_THRESHOLD=50
#ERROR_BREAKER_COOLDOWN_SEC=1200

# 大图/大视频保护（仅示例，需在代码中接入后生效）
#MAX_IMAGE_BYTES=104857600            # 100MB 以上图片直接标记为永久失败
#MAX_VIDEO_BYTES=2147483648           # 2GB 以上视频首发跳过（按需）

# =================== 推荐配置场景举例 ===================
# 【本地小型部署】（单人/家庭，图片<5万张，8G内存）
# 建议全部保持默认，无需修改

# 【NFS/网络盘环境】
# FS_MODE=nfs
# ENABLE_NFS_SYNC=true
# WATCH_USE_POLLING=true

# 【大规模图库首扫】（>20万张，16G+内存，8核+CPU）
# 可临时设 PERFORMANCE_MODE=low 减压，或保持 auto 由系统自调
# UV_THREADPOOL_SIZE=4

# 【公网/多用户环境】
# AI_DAILY_LIMIT=100
# AI_PER_IMAGE_COOLDOWN_SEC=120
# SETTINGS_REDIS_CACHE=true
